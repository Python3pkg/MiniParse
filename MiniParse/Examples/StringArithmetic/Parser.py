# This file was generated by MiniParse.Meta. Manual modifications will likely be lost.
# Command line:
#     python -m MiniParse.Meta --in MiniParse/Examples/StringArithmetic/Grammar.ebnf generate --out MiniParse/Examples/StringArithmetic/Parser.py --import ParsingUtilities --match-name-lambda 'lambda n: "ParsingUtilities.make" + n' --main-rule StringExpr

import MiniParse

import ParsingUtilities


class Parser:
    def __call__(self, tokens):
        class StringExprParser:
            @staticmethod
            def apply(cursor):
                return MiniParse.SequenceParser([StringTermParser, MiniParse.RepeatedParser(MiniParse.SequenceParser([MiniParse.LiteralParser('+'), StringTermParser]))], ParsingUtilities.makeStringExpr).apply(cursor)

        class StringTermParser:
            @staticmethod
            def apply(cursor):
                return MiniParse.SequenceParser([MiniParse.OptionalParser(MiniParse.SequenceParser([IntTermParser, MiniParse.LiteralParser('*')])), StringFactorParser], ParsingUtilities.makeStringTerm).apply(cursor)

        class StringFactorParser:
            @staticmethod
            def apply(cursor):
                return MiniParse.AlternativeParser([StringParser, MiniParse.SequenceParser([MiniParse.LiteralParser('('), StringExprParser, MiniParse.LiteralParser(')')])], ParsingUtilities.makeStringFactor).apply(cursor)

        class StringParser:
            @staticmethod
            def apply(cursor):
                return MiniParse.SequenceParser([MiniParse.LiteralParser('"'), MiniParse.RepeatedParser(CharParser), MiniParse.LiteralParser('"')], ParsingUtilities.makeString).apply(cursor)

        class CharParser:
            @staticmethod
            def apply(cursor):
                return MiniParse.AlternativeParser([MiniParse.LiteralParser('a'), MiniParse.LiteralParser('b'), MiniParse.LiteralParser('c'), MiniParse.LiteralParser('d'), MiniParse.LiteralParser('e'), MiniParse.LiteralParser('f')], ParsingUtilities.makeChar).apply(cursor)

        class IntTermParser:
            @staticmethod
            def apply(cursor):
                return MiniParse.SequenceParser([IntFactorParser, MiniParse.RepeatedParser(MiniParse.SequenceParser([MiniParse.AlternativeParser([MiniParse.LiteralParser('*'), MiniParse.LiteralParser('/')]), IntFactorParser]))], ParsingUtilities.makeIntTerm).apply(cursor)

        class IntFactorParser:
            @staticmethod
            def apply(cursor):
                return MiniParse.AlternativeParser([IntParser, MiniParse.SequenceParser([MiniParse.LiteralParser('('), IntExprParser, MiniParse.LiteralParser(')')])], ParsingUtilities.makeIntFactor).apply(cursor)

        class IntExprParser:
            @staticmethod
            def apply(cursor):
                return MiniParse.SequenceParser([IntTermParser, MiniParse.RepeatedParser(MiniParse.SequenceParser([MiniParse.AlternativeParser([MiniParse.LiteralParser('+'), MiniParse.LiteralParser('-')]), IntTermParser]))], ParsingUtilities.makeIntExpr).apply(cursor)

        class IntParser:
            @staticmethod
            def apply(cursor):
                return MiniParse.SequenceParser([MiniParse.OptionalParser(MiniParse.LiteralParser('-')), DigitParser, MiniParse.RepeatedParser(DigitParser)], ParsingUtilities.makeInt).apply(cursor)

        class DigitParser:
            @staticmethod
            def apply(cursor):
                return MiniParse.AlternativeParser([MiniParse.LiteralParser('0'), MiniParse.LiteralParser('1'), MiniParse.LiteralParser('2'), MiniParse.LiteralParser('3'), MiniParse.LiteralParser('4'), MiniParse.LiteralParser('5'), MiniParse.LiteralParser('6'), MiniParse.LiteralParser('7'), MiniParse.LiteralParser('8'), MiniParse.LiteralParser('9')], ParsingUtilities.makeDigit).apply(cursor)

        return MiniParse.parse(StringExprParser, tokens)
