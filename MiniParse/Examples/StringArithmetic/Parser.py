# This file was generated by MiniParse.Meta. Manual modifications will likely be lost.
# Command line:
#     python -m MiniParse.Meta --in MiniParse/Examples/StringArithmetic/Grammar.ebnf generate --out MiniParse/Examples/StringArithmetic/Parser.py --import ParsingUtilities --match-name-lambda 'lambda n: "ParsingUtilities.make" + n'

import ParsingUtilities
from MiniParse import OptionalParser, SequenceParser, AlternativeParser, LiteralParser, RepeatedParser


class StringExprParser:
    @staticmethod
    def apply(cursor):
        return SequenceParser([StringTermParser, RepeatedParser(SequenceParser([LiteralParser('+'), StringTermParser]))], ParsingUtilities.makeStringExpr).apply(cursor)


class StringTermParser:
    @staticmethod
    def apply(cursor):
        return SequenceParser([OptionalParser(SequenceParser([IntTermParser, LiteralParser('*')])), StringFactorParser], ParsingUtilities.makeStringTerm).apply(cursor)


class StringFactorParser:
    @staticmethod
    def apply(cursor):
        return AlternativeParser([StringParser, SequenceParser([LiteralParser('('), StringExprParser, LiteralParser(')')])], ParsingUtilities.makeStringFactor).apply(cursor)


class StringParser:
    @staticmethod
    def apply(cursor):
        return SequenceParser([LiteralParser('"'), RepeatedParser(CharParser), LiteralParser('"')], ParsingUtilities.makeString).apply(cursor)


class CharParser:
    @staticmethod
    def apply(cursor):
        return AlternativeParser([LiteralParser('a'), LiteralParser('b'), LiteralParser('c'), LiteralParser('d'), LiteralParser('e'), LiteralParser('f')], ParsingUtilities.makeChar).apply(cursor)


class IntTermParser:
    @staticmethod
    def apply(cursor):
        return SequenceParser([IntFactorParser, RepeatedParser(SequenceParser([AlternativeParser([LiteralParser('*'), LiteralParser('/')]), IntFactorParser]))], ParsingUtilities.makeIntTerm).apply(cursor)


class IntFactorParser:
    @staticmethod
    def apply(cursor):
        return AlternativeParser([IntParser, SequenceParser([LiteralParser('('), IntExprParser, LiteralParser(')')])], ParsingUtilities.makeIntFactor).apply(cursor)


class IntExprParser:
    @staticmethod
    def apply(cursor):
        return SequenceParser([IntTermParser, RepeatedParser(SequenceParser([AlternativeParser([LiteralParser('+'), LiteralParser('-')]), IntTermParser]))], ParsingUtilities.makeIntExpr).apply(cursor)


class IntParser:
    @staticmethod
    def apply(cursor):
        return SequenceParser([OptionalParser(LiteralParser('-')), DigitParser, RepeatedParser(DigitParser)], ParsingUtilities.makeInt).apply(cursor)


class DigitParser:
    @staticmethod
    def apply(cursor):
        return AlternativeParser([LiteralParser('0'), LiteralParser('1'), LiteralParser('2'), LiteralParser('3'), LiteralParser('4'), LiteralParser('5'), LiteralParser('6'), LiteralParser('7'), LiteralParser('8'), LiteralParser('9')], ParsingUtilities.makeDigit).apply(cursor)
